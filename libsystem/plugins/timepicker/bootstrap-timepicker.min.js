(function ($, window, document, undefined) {
  "use strict";

  var Timepicker = function (element, options) {
    this.widget = "";
    this.$element = $(element);

    // options
    this.defaultTime = options.defaultTime;
    this.disableFocus = options.disableFocus;
    this.isOpen = options.isOpen;
    this.minuteStep = options.minuteStep;
    this.modalBackdrop = options.modalBackdrop;
    this.secondStep = options.secondStep;
    this.showInputs = options.showInputs;
    this.showMeridian = options.showMeridian;
    this.showSeconds = options.showSeconds;
    this.template = options.template;
    this.appendWidgetTo = options.appendWidgetTo;
    this.upArrowStyle = options.upArrowStyle;
    this.downArrowStyle = options.downArrowStyle;
    this.containerClass = options.containerClass;

    this._init();
  };

  Timepicker.prototype = {
    constructor: Timepicker,

    _init: function () {
      var self = this;

      // bind events
      if (this.template) {
        this.$element.on({
          "focus.timepicker": $.proxy(this.showWidget, this),
          "click.timepicker": $.proxy(this.showWidget, this),
          "blur.timepicker": $.proxy(this.blurElement, this)
        });
      } else {
        this.$element.on({
          "focus.timepicker": $.proxy(this.highlightUnit, this),
          "click.timepicker": $.proxy(this.highlightUnit, this),
          "keydown.timepicker": $.proxy(this.elementKeydown, this),
          "blur.timepicker": $.proxy(this.blurElement, this)
        });
      }

      if (this.template !== false) {
        this.$widget = $(this.getTemplate())
          .prependTo(this.$element.parents(this.appendWidgetTo))
          .on("click", $.proxy(this.widgetClick, this));
      } else {
        this.$widget = false;
      }

      if (this.showInputs && this.$widget !== false) {
        this.$widget.find("input").each(function () {
          $(this).on({
            "click.timepicker": function () {
              $(this).select();
            },
            "keydown.timepicker": $.proxy(self.widgetKeydown, self)
          });
        });
      }

      this.setDefaultTime(this.defaultTime);
    },

    getTemplate: function () {
      var hour, minute, second, meridian;

      if (this.showInputs) {
        hour = '<input type="text" name="hour" class="bootstrap-timepicker-hour form-control" maxlength="2"/>';
        minute = '<input type="text" name="minute" class="bootstrap-timepicker-minute form-control" maxlength="2"/>';
        second = '<input type="text" name="second" class="bootstrap-timepicker-second form-control" maxlength="2"/>';
        meridian = '<input type="text" name="meridian" class="bootstrap-timepicker-meridian form-control" maxlength="2"/>';
      } else {
        hour = '<span class="bootstrap-timepicker-hour"></span>';
        minute = '<span class="bootstrap-timepicker-minute"></span>';
        second = '<span class="bootstrap-timepicker-second"></span>';
        meridian = '<span class="bootstrap-timepicker-meridian"></span>';
      }

      var table =
        "<table>" +
        "<tr>" +
        '<td><a href="#" data-action="incrementHour"><i class="' + this.upArrowStyle + '"></i></a></td>' +
        '<td class="separator">&nbsp;</td>' +
        '<td><a href="#" data-action="incrementMinute"><i class="' + this.upArrowStyle + '"></i></a></td>' +
        (this.showSeconds
          ? '<td class="separator">&nbsp;</td><td><a href="#" data-action="incrementSecond"><i class="' + this.upArrowStyle + '"></i></a></td>'
          : "") +
        (this.showMeridian
          ? '<td class="separator">&nbsp;</td><td class="meridian-column"><a href="#" data-action="toggleMeridian"><i class="' + this.upArrowStyle + '"></i></a></td>'
          : "") +
        "</tr>" +
        "<tr>" +
        "<td>" + hour + "</td> " +
        '<td class="separator">:</td>' +
        "<td>" + minute + "</td> " +
        (this.showSeconds ? '<td class="separator">:</td><td>' + second + "</td>" : "") +
        (this.showMeridian ? '<td class="separator">&nbsp;</td><td>' + meridian + "</td>" : "") +
        "</tr>" +
        "<tr>" +
        '<td><a href="#" data-action="decrementHour"><i class="' + this.downArrowStyle + '"></i></a></td>' +
        '<td class="separator"></td>' +
        '<td><a href="#" data-action="decrementMinute"><i class="' + this.downArrowStyle + '"></i></a></td>' +
        (this.showSeconds
          ? '<td class="separator">&nbsp;</td><td><a href="#" data-action="decrementSecond"><i class="' + this.downArrowStyle + '"></i></a></td>'
          : "") +
        (this.showMeridian
          ? '<td class="separator">&nbsp;</td><td><a href="#" data-action="toggleMeridian"><i class="' + this.downArrowStyle + '"></i></a></td>'
          : "") +
        "</tr>" +
        "</table>";

      if (this.template === "modal") {
        return (
          '<div class="bootstrap-timepicker-widget modal fade" data-bs-backdrop="' +
          (this.modalBackdrop ? "true" : "false") +
          '">' +
          '<div class="modal-dialog modal-sm">' +
          '<div class="modal-content">' +
          '<div class="modal-header">' +
          '<h5 class="modal-title">Pick a Time</h5>' +
          '<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>' +
          "</div>" +
          '<div class="modal-body">' +
          table +
          "</div>" +
          '<div class="modal-footer">' +
          '<button type="button" class="btn btn-primary" data-bs-dismiss="modal">OK</button>' +
          "</div>" +
          "</div></div></div>"
        );
      }

      return '<div class="bootstrap-timepicker-widget dropdown-menu">' + table + "</div>";
    },

  };

  $.fn.timepicker = function (option) {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.each(function () {
      var $this = $(this),
        data = $this.data("timepicker"),
        options = typeof option === "object" && option;
      if (!data) {
        $this.data(
          "timepicker",
          (data = new Timepicker(this, $.extend({}, $.fn.timepicker.defaults, options, $this.data())))
        );
      }
      if (typeof option === "string") {
        data[option].apply(data, args);
      }
    });
  };

  $.fn.timepicker.defaults = {
    defaultTime: "current",
    disableFocus: false,
    isOpen: false,
    minuteStep: 15,
    modalBackdrop: false,
    secondStep: 15,
    showSeconds: false,
    showInputs: true,
    showMeridian: true,
    template: "dropdown",
    appendWidgetTo: "body",
    upArrowStyle: "bi bi-chevron-up",     
    downArrowStyle: "bi bi-chevron-down",
    containerClass: "bootstrap-timepicker"
  };

  $.fn.timepicker.Constructor = Timepicker;
})(jQuery, window, document);
